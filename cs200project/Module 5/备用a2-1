// Programmer: Dhanush Patel
// Programmer's ID: 1553428

#include <iostream>
#include <vector>
#include <string>
using namespace std;

#include <cstring>

class Leg{
	friend class Route;

	const char* const startCity;
	const char* const endCity;
	int const dist;

	public:
	Leg(const char* const s, const char* const e, int d) : startCity(s), endCity(e), dist(d){}
	int getDist() const {return dist;}
	Leg& operator=(const Leg&);
//  void niceOutput(ostream&) const;
};

class Route{
	vector<const Leg*> legs;
	int const dist;

	public:
	Route(const Leg&);
	Route(const Route&, const Leg&);
	int getDistance() const {return dist;}
	void niceOutput(ostream&) const;
	Route& operator=(const Route&);
};

int main(){

	Leg lary[] = {
		Leg("San Ramon","Dublin",2),
		Leg("Dublin","Livermore",5),
		Leg("Livermore","Fremont",20),
		Leg("Fremont","Union City",3),
		Leg("Union City","San Jose",19),
		Leg("San Jose","Cupertino",4),
		Leg("Cupertino","Redwood City",15),
		Leg("Redwood City","San Francisco",18)
	};

	Route rary[] = {
		Route(lary[0]),
		Route(rary[0],lary[1]),
		Route(rary[1],lary[2]),
		Route(rary[2],lary[3]),
		Route(rary[3],lary[4]),
		Route(rary[4],lary[5]),
		Route(rary[5],lary[6]),
		Route(rary[6],lary[7])
	};

	cout << "Programmer: Dhanush Patel\n";
	cout << "Programmer's ID: 1553428\n";
	cout << "File: " << __FILE__ << "\n\n";

	for (int i = 0; i < 8; i++){
		for (int j = i + 1; j < 8; j++){
			if (rary[j].getDistance() > rary[i].getDistance()){
				swap(rary[i], rary[j]);
			}
		}
	}

	for(auto& i : rary){
		i.niceOutput(cout);
	}

}

Leg& Leg::operator=(const Leg& copyThis){
	Leg& host = *this;
	if(this != &copyThis){
		const_cast<const char*&>(host.startCity) = copyThis.startCity;
		const_cast<const char*&>(host.endCity) = copyThis.endCity;
		const_cast<int&>(host.dist) = copyThis.dist;
	}
	return host;
}

//void Leg::niceOutput(ostream& os) const{
//  os << startCity << " to " << endCity << " is " << dist << " miles" << endl;
//}

Route::Route(const Leg& leg) : dist(leg.getDist()){
	legs.push_back(&leg);
}

Route::Route(const Route& route, const Leg& leg)
				: legs(route.legs), dist(route.dist+leg.dist){

		if (strcmp(route.legs.back()->endCity, leg.startCity) != 0)
			throw "Mismatch";

	legs.push_back(&leg);
}

void Route::niceOutput(ostream& os) const{
	string output = "Route: ";
	string temp = " to ";
	int totalDist = 0;
	for(int i = 0; i < legs.size(); i++){
		output += legs[i]->startCity;
		if(i != legs.size()-1) {
			output += temp;
		}
		else{
			output += (temp + legs[i]->endCity);
		}
		totalDist += legs[i]->getDist();
	}
	output += (" "+to_string(totalDist)+" miles\n");
	os << output;
}

Route& Route::operator=(const Route& copyThis){
	Route& host = *this;
	if(this != &copyThis){
		const_cast<int&>(host.dist) = copyThis.getDistance();
		host.legs = copyThis.legs;
	}
	return host;
}